WEBVTT

1
00:00:01.130 --> 00:00:05.200
On the whole, for a program to be useful
it needs to get at least some

2
00:00:05.200 --> 00:00:06.500
information from the user.

3
00:00:07.050 --> 00:00:10.620
With this data, the program can take
actions that are relevant to the user,

4
00:00:10.700 --> 00:00:13.330
instead of generic actions, like
printing hello world.

5
00:00:13.790 --> 00:00:16.650
Data can be provided to a computer in a
bunch of different ways.

6
00:00:17.960 --> 00:00:22.310
For example, on a website you might
input data by entering text into text

7
00:00:22.310 --> 00:00:24.020
fields or clicking links.

8
00:00:24.410 --> 00:00:27.850
If you're using a mobile application,
maybe you'll click on buttons or select

9
00:00:27.920 --> 00:00:29.620
preferences from a drop-down menu.

10
00:00:30.430 --> 00:00:33.800
In a command line program, you might
provide additional data by passing

11
00:00:33.800 --> 00:00:37.550
strings as parameters to the program,
or you could have the program ask you

12
00:00:37.550 --> 00:00:38.620
for data interactively.

13
00:00:39.020 --> 00:00:42.880
All of these various platforms,
programs, and apps process data

14
00:00:42.880 --> 00:00:46.620
differently. Some might take the
contents of a file as data to be

15
00:00:46.620 --> 00:00:50.200
processed, others gather data from
other sources and process it in the

16
00:00:50.200 --> 00:00:54.440
background. Remember our earlier
example, when we automated the process

17
00:00:54.440 --> 00:00:56.310
of identifying and removing duplicate
emails?

18
00:00:57.410 --> 00:01:01.580
There, the data provided to the program
was the list of emails, which would

19
00:01:01.580 --> 00:01:05.310
usually be given in a file that lists
the emails one per line.

20
00:01:06.320 --> 00:01:09.390
Whichever way your application gets the
data, it will need to come from

21
00:01:09.390 --> 00:01:13.540
somewhere. For our first examples in
this course, we'll just have the data as

22
00:01:13.540 --> 00:01:15.370
its own line in our block of code.

23
00:01:15.940 --> 00:01:17.800
This is limited, but straightforward.

24
00:01:18.290 --> 00:01:21.730
Later in this course, and in upcoming
courses, we'll introduce you to better

25
00:01:21.730 --> 00:01:23.450
ways of feeding data into your code.

26
00:01:23.830 --> 00:01:27.830
For now though, let's see this idea in
action in a very simple example.

27
00:01:34.920 --> 00:01:38.540
By having the name separate from the
call to the print function, we're making

28
00:01:38.540 --> 00:01:42.320
the line of code that calls the print
function generic, while still

29
00:01:42.320 --> 00:01:43.550
personalizing the greeting.

30
00:01:44.420 --> 00:01:47.880
If we then want to say hello to a
different person, we only need to change

31
00:01:47.900 --> 00:01:50.520
the name, but the call to the print
function will remain the same.

32
00:01:50.880 --> 00:01:55.590
Pretty simple, right? Next up, we'll
learn a few other easy things that you

33
00:01:55.590 --> 00:01:56.890
can get Python to do for you.